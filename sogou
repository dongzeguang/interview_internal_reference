https://maochunguang.github.io/java-interview/interview_topn/meituan.html

Java基础
1、 JAVA中的几种基本数据类型是什么，各自占用多少字节。
2、 String类能被继承吗，为什么。
3、 String，Stringbuffer，StringBuilder的区别。
4、 ArrayList和LinkedList有什么区别。
5、 抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么,类可以实现多个接口么。
6、 继承和聚合的区别在哪。
7、final的用途。
8、写出三种单例模式实现 。
9、 如何在父类中为子类自动完成所有的hashcode和equals实现？这么做有何优劣。
10、 请结合OO设计理念，谈谈访问修饰符public、private、protected、default在应用设计中的作用。
11、 深拷贝和浅拷贝区别。
12、 数组和链表数据结构描述，各自的时间复杂度。
13、 请列出5个运行时异常。
14、 说一说你对java.lang.Object对象中hashCode和equals方法的理解。在什么场景下需要重新实现这两个方法。
15、 什么是序列化，怎么序列化，为什么序列化，反序列化会遇到什么问题，如何解决。


1、 讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当new的时候，他们的执行顺序。
2、 用过哪些Map类，都有什么区别，HashMap是线程安全的吗,并发下使用的Map是什么，他们内部原理分别是什么，比如存储方式，hashcode，扩容，默认容量等。
3、 JAVA8的ConcurrentHashMap为什么放弃了分段锁，有什么问题吗，如果你来设计，你如何设计。
4、 有没有有顺序的Map实现类，如果有，他们是怎么保证有序的。
5、 IO模型有哪些，讲讲你理解的nio ，他和bio，aio的区别是啥，谈谈reactor模型。
6、 反射的原理，反射创建类实例的三种方式是什么。
7、 反射中，Class.forName和ClassLoader区别 。
8、 描述动态代理的几种实现方式，分别说出相应的优缺点。
9、 动态代理与cglib实现的区别。
10、 为什么CGlib方式可以对接口实现代理。
11、 error和exception的区别，CheckedException，RuntimeException的区别。
12、 在自己的代码中，如果创建一个java.lang.String类，这个类是否可以被类加载器加载？为什么。
13、 在jdk1.5中，引入了泛型，泛型的存在是用来解决什么问题。
14、 这样的a.hashcode() 有什么用，与a.equals(b)有什么关系。
15、 有没有可能2个不相等的对象有相同的hashcode。
16、 Java中的HashSet内部是如何工作的。
17、 java8的新特性。
18、线程的生命周期

JVM
4.4.2 什么情况下会发生栈内存溢出。
4.4.3 JVM的内存结构，Eden和Survivor比例。
4.4.4 JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。
4.4.5 JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代，说说你知道的几种主要的JVM参数。
4.4.6 你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。
4.4.7 垃圾回收算法的实现原理。
4.4.8 当出现了内存溢出，你怎么排错。
4.4.9 JVM内存模型的相关知识了解多少，比如重排序，内存屏障，happen-before，主内存，工作内存等。
4.5.0 简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。
4.5.1 讲讲JAVA的反射机制。
4.5.2 你们线上应用的JVM参数有哪些。
4.5.3 g1和cms区别,吞吐量优先和响应优先的垃圾收集器选择。
4.5.4 怎么打出线程栈信息。

数据库：

1、题目：从 innodb 的索引结构分析，为什么索引的 key 长度不能太长？
出题人：阿里巴巴出题专家：近秋／阿里云数据库产品技术部技术专家
参考答案：key 太长会导致一个页当中能够存放的 key 的数目变少，间接导致索引树的页数目变多，索引层次增加，从而影响整体查询变更的效率。

2、数据库的事务实现原理、操作过程、如何做到事物之间的独立性等问题
3、 数据库的脏读，幻读，不可重复读出现的原因原理，解决办法
4、 数据库的隔离级别、MVCC
5、 乐观锁、悲观锁、互斥锁、读写锁的原理实现与区别

6、数据库表包含三列：广告编号ad_id，广告开始投放时间ad_start，广告投放结束时间ad_end。用一行SQL语句查询给定时间段内存在的广告。
      
          

网络：
1、题目：输入 ping IP 后敲回车，发包前会发生什么？
出题人：阿里巴巴出题专家：怀虎／阿里云云效平台负责人
参考答案：
ping目标ip时，先查路由表，确定出接口

如果落在直连接口子网内，此时若为以太网等 多路访问网络 则先查询arp缓存，命中则直接发出，否则在该接口上发arp询问目标ip的mac地址，取得后发出，若为ppp等 点对点网络 ，则直接可以发出；
如果查表落在缺省路由上，此时若为以太网等 多路访问网络 则先查询网关arp缓存，命中则直接发出，否则在该接口上发arp询问网关的mac地址，取得后发出，若为ppp等 点对点网络 ，则直接可以发出；
若查表未命中，则返回不可达。
2、tcp四次挥手的过程？TIME_WAIT为什么至少设置两倍的MSL时间？

3、close wait和time wait是什么？如何排查？有什么意义？
4、 什么是连接的半打开，半关闭状态



分布式：
1、题目：如果让你来设计一个支持数据库、NOSQL 和大数据之间数据实时流动的数据流及处理的系统，你会考虑哪些问题？如何设计？
2、题目：假如给你一个新产品，你将从哪些方面来保障它的质量？
出题人：阿里巴巴出题专家：晨晖 ／阿里云中间件技术部测试开发专家
参考答案：
可以从代码开发、测试保障、线上质量三个方面来保障。

在代码开发阶段，有单元测试、代码Review、静态代码扫描等；

测试保障阶段，有功能测试、性能测试、高可用测试、稳定性测试、兼容性测试等；

在线上质量方面，有灰度发布、紧急回滚、故障演练、线上监控和巡检等

3、 CAS操作
4、 分布式raft算法

算法：

1、LRU算法设计
2、将单向链表reverse，如ABCD变成DCBA，只能搜索链表一次。
3、 在一个文件中有10G个整数，乱序排列，要求找出中位数。内存限制为2G。
package com.program;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * LRUCache算法：最近最少使用算法
 * 核心算法实现：散列表+双向链表
 * 算法核心功能：
 * 1.添加缓存(先判断散列表中是否存在该缓存，如果存在，则将该缓存移动到链尾。
 * 如果不存在，则先判断链表是否已经满了，如果满了则先把头结点删除，未满则直接插到链尾)
 * 2.查找缓存(因为是散列表，所以时间复杂度，接近O(1))
 * 3.删除缓存
 
 * LRU算法
 * LRU(Least Recently Used)，即最近最少使用算法。常用于实现一个简单的缓存功能，就是把很久未使用的直接移除掉，只保留最近使用的。
 *
 * LRU主要功能
 * LRU主要需要实现两个功能
 *
 * 添加缓存(涉及到删除缓存)
 * 获取缓存
 * 实现原理
 * 其实用一个单链表就能实现简单的LRU算法，但是链表的查找时间复杂度比较高了，是O(n)。其实用一个散列表+双链表就可以实现一个O(1)复杂度的LRU算法。用散列表就可以直接定位某个缓存，时间复杂度O(1)，但是散列表插入缓存之后，就没有了顺序，所以才需要一个链表来维护这个缓存的顺序，这样才能知道哪些缓存一直未使用，超过缓存最大容量之后需要删除未使用的缓存。而如果单链表删除某个缓存的话，又需要先遍历这个元素（时间复杂度O(n)）才行。所以这里用双链表，那么就可以通过散列表直接定位到这个缓存节点，然后知道这个缓存节点的前驱和后继节点就可以在O(1)时间复杂度内删除这个缓存了。
 *
 */
public class LRUCache {
    private int cacheSize = 10;
    private HashMap<String, Node> map = new HashMap<>();
    private Node head;
    private Node tail;

    public void LRUCache(int cacheSize) {
        this.cacheSize = cacheSize;
    }

    /**
     * 添加缓存
     * 先判断是否已有该缓存，如果有则直接放到链尾取出，
     * 如果没有，则判断是否已满，如果满了，删除链头数据，否则直接插到链尾
     */
    public void addCache(String key, String value) {
        if (map.containsKey(key)) {
            Node node = map.get(key);
            if (node.next != null) {
                if (node.pre == null) {
                    head = node.next;
                } else {
                    node.pre.next = node.next;
                    node.next.pre = node.pre;
                }
                tail.next = node;
                node.pre = tail;
                node.next = null;
                tail = node;
            }
        } else {
            Node node = new Node(key, value);
            if (map.size() == cacheSize) {
                Node temp = head;
                head = head.next;
                map.remove(temp.key);
                node.pre = tail;
                tail.next = node;
                tail = node;
            } else {
                if (head == null) {
                    head = node;
                    tail = node;
                } else {
                    node.pre = tail;
                    tail.next = node;
                    tail = node;
                }
            }
            map.put(key, node);
        }
    }

    /**
     * 获取缓存
     * 先判断是否有缓存，如果有，需要把该缓存移动到链尾返回
     */
    public String getCache(String key) {
        if (map.containsKey(key)) {
            Node node = map.get(key);
            if (node.next == null) {
                return node.value;
            }
            if (node.pre == null) {
                head = node.next;
            } else {
                node.pre.next = node.next;
                node.next.pre = node.pre;
            }
            tail.next = node;
            node.pre = tail;
            node.next = null;
            tail = node;
            return node.value;
        } else {
            return null;
        }
    }

    public void test() {
        Iterator<Map.Entry<String, Node>> iterator = map.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, Node> entry = iterator.next();
            System.out.println(entry.getKey() + "--" + entry.getValue().value);
        }
    }

    public void test2() {
        Node temp = head;
        while (temp != null) {
            System.out.println(temp.key);
            temp = temp.next;
        }
    }

    public static void main(String[] args) {
        LRUCache cache = new LRUCache();
        cache.addCache("key0", "value0");
        cache.addCache("key1", "value1");
        cache.addCache("key2", "value2");
        cache.addCache("key3", "value3");
        cache.addCache("key4", "value4");
        cache.addCache("key5", "value5");
        cache.addCache("key6", "value6");
        cache.addCache("key7", "value7");
        cache.addCache("key8", "value8");
        cache.addCache("key9", "value9");
        cache.getCache("key9");
        cache.test2();
    }

    class Node {
        String key;
        String value;
        Node pre;
        Node next;

        public Node(String key, String value) {
            this.key = key;
            this.value = value;
        }
    }
}

